// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.
//g++ Server.cpp gen-cpp/test_types.cpp -lthrift  -std=c++14 -o test
#include "gen-cpp/test_types.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

#include <boost/shared_ptr.hpp>
#include "thrift/transport/TBufferTransports.h"
#include "thrift/protocol/TBinaryProtocol.h"

#include <iostream>
#include <string>
 
#include <memory>
#include <sstream>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using apache::thrift::protocol::TBinaryProtocol;
using apache::thrift::transport::TMemoryBuffer;

 
using boost::shared_ptr;

#define MAX_NUM 200
 #include <fstream>
 
int main(int argc, char **argv) {
  int port = 9090;

User u;
u.__set_name("ddd");
u.__set_age(9);
u.__set_vip(true);


std::string thriftStr, jsonStr;
std::stringstream ss;

ss << u;
std::string s = ss.str();
  std::cout << s << '\n';
   //  int time;
 
 
   //  //①序列化为thrift binary protocol
   //  boost::shared_ptr<TMemoryBuffer> buffer(new TMemoryBuffer());

   // TBinaryProtocol binaryProtcol(*buffer);
 
   //  u.write(&binaryProtcol );
   //      buffer->getBufferAsString();
   //     auto str = buffer->getBufferAsString();

// Use TFramedTransport
    const auto memory_buffer = std::make_shared<apache::thrift::transport::TMemoryBuffer>();
    apache::thrift::transport::TFramedTransport framed_transport(memory_buffer);
    framed_transport.write(reinterpret_cast<const uint8_t*>(s.data()),
                           (uint32_t)s.length());
    framed_transport.flush();
    std::string msg_content_framed = memory_buffer->getBufferAsString();


        std::cout << "thrift反序列化" << u <<   "==-ms\n";

        const auto buff= std::make_shared<apache::thrift::transport::TMemoryBuffer>();
        //apache::thrift::transport::TFramedTransport ff(buff);
       // ff.write(reinterpret_cast<const uint8_t*>(u.data()));

std::fstream myfile;
    myfile = std::fstream("file.binary", std::ios::out | std::ios::binary);
    myfile << u;
    myfile.close();

 
    // //②反序列thrift binary data
    // thriftSerializeTest::thriftBinaryDeserialize(thriftStr, &time);
    // cout << "thrift反序列化" << MAX_NUM << "次时间为" << time << "ms\n";
 
 
    // //③jsoncpp序列化为json
    // thriftSerializeTest::jsonSerialize(sc, &jsonStr, &time);
    // cout << "jsoncpp序列化json" << MAX_NUM << "次时间为" << time << "ms\n";
 
    // //④jsoncpp反序列化json
    // thriftSerializeTest::jsonDeserialize(jsonStr, &time);



  return 0;
}